http://74.125.224.18/

http://s.yanghao.org/

如何在windows上使用eclipse远程连接hadoop进行程序开发
http://blog.sina.com.cn/s/blog_8e5354210101kyuf.html

时间复杂度与空间复杂度
http://blog.sina.com.cn/s/blog_8e5354210101ky5r.html


http://ju.outofmemory.cn/entry/76892

搜索技术博客
http://ju.outofmemory.cn/feed/75/

http://www.cnblogs.com/sunshineground/p/3594482.html

http://blog.csdn.net/boonya/article/details/8315518


大流量高并发网站开发

http://www.cnblogs.com/Mainz/p/3219224.html

http://www.zhihu.com/question/19809311

http://www.importnew.com/6914.html

http://www.searchsoa.com.cn/showcontent_56539.htm

http://ju.outofmemory.cn/entry/55625

http://www.cnblogs.com/janspursue/archive/2013/01/04/javaee_deve_basic_1.html

http://www.iteye.com/topic/1136596



敏捷软件开发 读书笔记 （3）――OO五大原则（2.OCP――开闭原则）

开闭原则很简单，一句话：“Closed for Modification; Open for Extension”――“对变更关闭；对扩展开放”。开闭原则其实没什么好讲的，我将其归结为一个高层次的设计总则。就这一点来讲，OCP的地位应该比SRP优先。

OCP的动机很简单：软件是变化的。不论是优质的设计还是低劣的设计都无法回避这一问题。OCP说明了软件设计应该尽可能地使架构稳定而又容易满足不同的需求。

为什么要OCP？答案也很简单――重用。

“重用”，并不是什么软件工程的专业词汇，它是工程界所共用的词汇。早在软件出现前，工程师们就在实践“重用”了。比如机械产品，通过零部件的组装得到最终的能够使用的工具。由于机械部件的设计和制造过程是极其复杂的，所以互换性是一个重要的特性。一辆车可以用不同的发动机、不同的变速箱、不同的轮胎……很多东西我们直接买来装上就可以了。这也是一个OCP的例子。（可能是由于我是搞机械出身的吧，所以就举些机械方面的例子^_^）。

如何在OO中引入OCP原则？把对实体的依赖改为对抽象的依赖就行了。下面的例子说明了这个过程：

05赛季的时候，一辆F1赛车有一台V10引擎。但是到了06赛季，国际汽联修改了规则，一辆F1赛车只能安装一台V8引擎。车队很快投入了新赛车的研发，不幸的是，从工程师那里得到消息，旧车身的设计不能够装进新研发的引擎。我们不得不为新的引擎重新打造车身，于是一辆新的赛车诞生了。但是，麻烦的事接踵而来，国际汽联频频修改规则，搞得设计师在“赛车”上改了又改，最终变得不成样子，只能把它废弃。